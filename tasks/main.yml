---
- name: Get package facts
  package_facts:
    manager: "auto"

- name: Set supported_os when platform and version are in supported platforms dictionary
  set_fact:
    key_value: "" # appeasing the linter
    supported_os: true
  loop: "{{ query('dict', app_protect_linux_families) }}"
  when: ansible_distribution in item.key and ansible_distribution_version | float in item.value

- name: Set supported_os to false if fact not defined
  set_fact:
    key_value: "" # appeasing the linter
    supported_os: true
  # when: supported_os is not defined

- name: Debug supported os
  debug:
    msg: "supported_os {{ supported_os }}"
    verbosity: 2

- name: Debug app_protect_state
  debug:
    msg: "Desired app_protect_state {{ app_protect_state }}"

- name: Abort if the OS/version combination is not supported
  fail:
    msg: "NGINX App Protect is not supported on os family {{ ansible_distribution }} version {{ ansible_distribution_version }}"
  when: not supported_os


- name: "Install NGINX App Protect"
  block:

    - import_tasks: "prerequisites/install-prerequisites.yml"
      tags: nginx_prerequisites

    - import_tasks: keys/apt-key.yml
      when:
        - ansible_os_family == "Debian"
        - app_protect_state != "absent"
          or app_protect_install_signatures
          or app_protect_install_threat_campaigns
      tags: nginx_aptkey

    - import_tasks: keys/rpm-key.yml
      when:
        - ansible_os_family == "RedHat"
        - app_protect_state != "absent"
          or app_protect_install_signatures
          or app_protect_install_threat_campaigns
      tags: nginx_rpmkey

    - name: "(All OSs) Setup license"
      import_tasks: setup-license.yml
      when:
        - app_protect_state != "absent"
          or app_protect_install_signatures
          or app_protect_install_threat_campaigns

    - name: "Install NGINX App Protect"
      import_tasks: install-app-protect.yml

    - name: "NGINX App Protect Signatures"
      import_tasks: install-signatures.yml
      when: app_protect_install_signatures

    - name: "NGINX App Protect Threat Campaigns"
      import_tasks: install-threat-campaigns.yml
      when: app_protect_install_threat_campaigns

    - name: "Remove license"
      import_tasks: delete-license.yml
      when:
        - app_protect_delete_license
      tags: app_protect_delete_license

    - name: "Configure NGINX App Protect"
      import_tasks: configure-app-protect.yml
      when: app_protect_configure

  when: app_protect_state != "absent"


- name: "Remove NGINX App Protect"
  block:

    - name: "Remove NGINX App Protect"
      import_tasks: install-app-protect.yml

    - name: "Disable NGINX App Protect Configuration"
      import_tasks: configure-app-protect.yml
      when: app_protect_configure

  when: app_protect_state == "absent"
